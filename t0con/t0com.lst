;  ASM code generated by mikroVirtualMachine for PIC - V. 7.0.0.3
;  Date/Time: 12/06/2017 09:26:41
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF42	F000			GOTO	_main
$0008	$	_mask:
;t0com.c,1 :: 			unsigned short mask (unsigned short num) {
;t0com.c,2 :: 			switch (num) {
$0008	$D01E	    			BRA	L_mask_0
;t0com.c,3 :: 			case 0: return 0x3F;
$000A	$	L_mask_2:
$000A	$0E3F	    			MOVLW	63
$000C	$6E00	    			MOVWF	STACK_0, 0
$000E	$0012	    			RETURN
;t0com.c,4 :: 			case 1: return 0x06;
$0010	$	L_mask_3:
$0010	$0E06	    			MOVLW	6
$0012	$6E00	    			MOVWF	STACK_0, 0
$0014	$0012	    			RETURN
;t0com.c,5 :: 			case 2: return 0x5B;
$0016	$	L_mask_4:
$0016	$0E5B	    			MOVLW	91
$0018	$6E00	    			MOVWF	STACK_0, 0
$001A	$0012	    			RETURN
;t0com.c,6 :: 			case 3: return 0x4F;
$001C	$	L_mask_5:
$001C	$0E4F	    			MOVLW	79
$001E	$6E00	    			MOVWF	STACK_0, 0
$0020	$0012	    			RETURN
;t0com.c,7 :: 			case 4: return 0x66;
$0022	$	L_mask_6:
$0022	$0E66	    			MOVLW	102
$0024	$6E00	    			MOVWF	STACK_0, 0
$0026	$0012	    			RETURN
;t0com.c,8 :: 			case 5: return 0x6D;
$0028	$	L_mask_7:
$0028	$0E6D	    			MOVLW	109
$002A	$6E00	    			MOVWF	STACK_0, 0
$002C	$0012	    			RETURN
;t0com.c,9 :: 			case 6: return 0x7D;
$002E	$	L_mask_8:
$002E	$0E7D	    			MOVLW	125
$0030	$6E00	    			MOVWF	STACK_0, 0
$0032	$0012	    			RETURN
;t0com.c,10 :: 			case 7: return 0x07;
$0034	$	L_mask_9:
$0034	$0E07	    			MOVLW	7
$0036	$6E00	    			MOVWF	STACK_0, 0
$0038	$0012	    			RETURN
;t0com.c,11 :: 			case 8: return 0x7F;
$003A	$	L_mask_10:
$003A	$0E7F	    			MOVLW	127
$003C	$6E00	    			MOVWF	STACK_0, 0
$003E	$0012	    			RETURN
;t0com.c,12 :: 			case 9: return 0x6F;
$0040	$	L_mask_11:
$0040	$0E6F	    			MOVLW	111
$0042	$6E00	    			MOVWF	STACK_0, 0
$0044	$0012	    			RETURN
;t0com.c,13 :: 			}
$0046	$	L_mask_0:
$0046	$5018	    			MOVF	FARG_mask+0, 0, 0
$0048	$0A00	    			XORLW	0
$004A	$E0DF	    			BZ	L_mask_2
$004C	$5018	    			MOVF	FARG_mask+0, 0, 0
$004E	$0A01	    			XORLW	1
$0050	$E0DF	    			BZ	L_mask_3
$0052	$5018	    			MOVF	FARG_mask+0, 0, 0
$0054	$0A02	    			XORLW	2
$0056	$E0DF	    			BZ	L_mask_4
$0058	$5018	    			MOVF	FARG_mask+0, 0, 0
$005A	$0A03	    			XORLW	3
$005C	$E0DF	    			BZ	L_mask_5
$005E	$5018	    			MOVF	FARG_mask+0, 0, 0
$0060	$0A04	    			XORLW	4
$0062	$E0DF	    			BZ	L_mask_6
$0064	$5018	    			MOVF	FARG_mask+0, 0, 0
$0066	$0A05	    			XORLW	5
$0068	$E0DF	    			BZ	L_mask_7
$006A	$5018	    			MOVF	FARG_mask+0, 0, 0
$006C	$0A06	    			XORLW	6
$006E	$E0DF	    			BZ	L_mask_8
$0070	$5018	    			MOVF	FARG_mask+0, 0, 0
$0072	$0A07	    			XORLW	7
$0074	$E0DF	    			BZ	L_mask_9
$0076	$5018	    			MOVF	FARG_mask+0, 0, 0
$0078	$0A08	    			XORLW	8
$007A	$E0DF	    			BZ	L_mask_10
$007C	$5018	    			MOVF	FARG_mask+0, 0, 0
$007E	$0A09	    			XORLW	9
$0080	$E0DF	    			BZ	L_mask_11
$0082	$	L_mask_1:
;t0com.c,14 :: 			}
$0082	$0012	    			RETURN
$0084	$	_main:
;t0com.c,16 :: 			void main () {
;t0com.c,19 :: 			t0con = 0b11000111;
$0084	$0EC7	    			MOVLW	199
$0086	$6ED5	    			MOVWF	T0CON, 0
;t0com.c,20 :: 			tmr0l = 0b00000000;
$0088	$6AD6	    			CLRF	TMR0L, 0
;t0com.c,21 :: 			trisd = 0;
$008A	$6A95	    			CLRF	TRISD, 0
;t0com.c,22 :: 			trisb = 0;
$008C	$6A93	    			CLRF	TRISB, 0
;t0com.c,23 :: 			trisa = 0;
$008E	$6A92	    			CLRF	TRISA, 0
;t0com.c,24 :: 			portd = 0x00;
$0090	$6A83	    			CLRF	PORTD, 0
;t0com.c,25 :: 			portb = 0x00;
$0092	$6A81	    			CLRF	PORTB, 0
;t0com.c,26 :: 			porta = 0x00;
$0094	$6A80	    			CLRF	PORTA, 0
;t0com.c,27 :: 			valor = 0;
$0096	$6A15	    			CLRF	main_valor_L0, 0
;t0com.c,28 :: 			INTCON = 0;
$0098	$6AF2	    			CLRF	INTCON, 0
;t0com.c,29 :: 			porta.ra2 = 1;
$009A	$8480	    			BSF	PORTA, 2, 0
;t0com.c,31 :: 			while (1) {
$009C	$	L_main_12:
;t0com.c,32 :: 			if (tmr0l == valor) {
$009C	$50D6	    			MOVF	TMR0L, 0, 0
$009E	$1815	    			XORWF	main_valor_L0, 0, 0
$00A0	$E11C	    			BNZ	L_main_14
;t0com.c,33 :: 			portb = tmr0l;
$00A2	$CFD6	FF81			MOVFF	TMR0L, PORTB
;t0com.c,34 :: 			portd = mask(valor);
$00A6	$C015	F018			MOVFF	main_valor_L0, FARG_mask+0
$00AA	$EC04	F000			CALL	_mask
$00AE	$C000	FF83			MOVFF	STACK_0, PORTD
;t0com.c,35 :: 			for(i = 0 ; i < (256 * 255); i++);
$00B2	$6A16	    			CLRF	main_i_L0, 0
$00B4	$6A17	    			CLRF	main_i_L0+1, 0
$00B6	$	L_main_15:
$00B6	$0EFF	    			MOVLW	255
$00B8	$5C17	    			SUBWF	main_i_L0+1, 0, 0
$00BA	$E102	    			BNZ	L_main_19
$00BC	$0E00	    			MOVLW	0
$00BE	$5C16	    			SUBWF	main_i_L0, 0, 0
$00C0	$	L_main_19:
$00C0	$E203	    			BC	L_main_16
$00C2	$	L_main_17:
$00C2	$4A16	    			INFSNZ	main_i_L0, 1, 0
$00C4	$2A17	    			INCF	main_i_L0+1, 1, 0
$00C6	$D7F7	    			BRA	L_main_15
$00C8	$	L_main_16:
;t0com.c,36 :: 			valor = valor + 1;
$00C8	$5015	    			MOVF	main_valor_L0, 0, 0
$00CA	$0F01	    			ADDLW	1
$00CC	$6E01	    			MOVWF	STACK_1, 0
$00CE	$C001	F015			MOVFF	STACK_1, main_valor_L0
;t0com.c,37 :: 			if (valor > 7) valor = 0;
$00D2	$5001	    			MOVF	STACK_1, 0, 0
$00D4	$0807	    			SUBLW	7
$00D6	$A0D8	    			BTFSS	STATUS, C, 0
$00D8	$6A15	    			CLRF	main_valor_L0, 0
$00DA	$	L_main_18:
;t0com.c,38 :: 			}
$00DA	$	L_main_14:
;t0com.c,39 :: 			}
$00DA	$D7E0	    			BRA	L_main_12
;t0com.c,40 :: 			}
$00DC	$D7FF	    			BRA	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0008		mask
$0084		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0008		_mask:
$000A		L_mask_2:
$0010		L_mask_3:
$0016		L_mask_4:
$001C		L_mask_5:
$0022		L_mask_6:
$0028		L_mask_7:
$002E		L_mask_8:
$0034		L_mask_9:
$003A		L_mask_10:
$0040		L_mask_11:
$0046		L_mask_0:
$0082		L_mask_1:
$0084		_main:
$009C		L_main_12:
$00B6		L_main_15:
$00C0		L_main_19:
$00C2		L_main_17:
$00C8		L_main_16:
$00DA		L_main_14:
$00DA		L_main_18:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		main_valor_L0
$0016		main_i_L0
$0018		FARG_mask+0
$0F80		PORTA
$0F81		PORTB
$0F83		PORTD
$0F92		TRISA
$0F93		TRISB
$0F95		TRISD
$0FD5		T0CON
$0FD6		TMR0L
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF2		INTCON
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


