;  ASM code generated by mikroVirtualMachine for PIC - V. 7.0.0.3
;  Date/Time: 05/06/2017 08:31:43
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF42	F000			GOTO	_main
$0008	$	_mask:
;7segs.c,4 :: 			unsigned short mask (unsigned short num) {
;7segs.c,5 :: 			switch (num) {
$0008	$D01E	    			BRA	L_mask_0
;7segs.c,6 :: 			case 0: return 0x3F;
$000A	$	L_mask_2:
$000A	$0E3F	    			MOVLW	63
$000C	$6E00	    			MOVWF	STACK_0, 0
$000E	$0012	    			RETURN
;7segs.c,7 :: 			case 1: return 0x06;
$0010	$	L_mask_3:
$0010	$0E06	    			MOVLW	6
$0012	$6E00	    			MOVWF	STACK_0, 0
$0014	$0012	    			RETURN
;7segs.c,8 :: 			case 2: return 0x5B;
$0016	$	L_mask_4:
$0016	$0E5B	    			MOVLW	91
$0018	$6E00	    			MOVWF	STACK_0, 0
$001A	$0012	    			RETURN
;7segs.c,9 :: 			case 3: return 0x4F;
$001C	$	L_mask_5:
$001C	$0E4F	    			MOVLW	79
$001E	$6E00	    			MOVWF	STACK_0, 0
$0020	$0012	    			RETURN
;7segs.c,10 :: 			case 4: return 0x66;
$0022	$	L_mask_6:
$0022	$0E66	    			MOVLW	102
$0024	$6E00	    			MOVWF	STACK_0, 0
$0026	$0012	    			RETURN
;7segs.c,11 :: 			case 5: return 0x6D;
$0028	$	L_mask_7:
$0028	$0E6D	    			MOVLW	109
$002A	$6E00	    			MOVWF	STACK_0, 0
$002C	$0012	    			RETURN
;7segs.c,12 :: 			case 6: return 0x7D;
$002E	$	L_mask_8:
$002E	$0E7D	    			MOVLW	125
$0030	$6E00	    			MOVWF	STACK_0, 0
$0032	$0012	    			RETURN
;7segs.c,13 :: 			case 7: return 0x07;
$0034	$	L_mask_9:
$0034	$0E07	    			MOVLW	7
$0036	$6E00	    			MOVWF	STACK_0, 0
$0038	$0012	    			RETURN
;7segs.c,14 :: 			case 8: return 0x7F;
$003A	$	L_mask_10:
$003A	$0E7F	    			MOVLW	127
$003C	$6E00	    			MOVWF	STACK_0, 0
$003E	$0012	    			RETURN
;7segs.c,15 :: 			case 9: return 0x6F;
$0040	$	L_mask_11:
$0040	$0E6F	    			MOVLW	111
$0042	$6E00	    			MOVWF	STACK_0, 0
$0044	$0012	    			RETURN
;7segs.c,16 :: 			}
$0046	$	L_mask_0:
$0046	$5017	    			MOVF	FARG_mask+0, 0, 0
$0048	$0A00	    			XORLW	0
$004A	$E0DF	    			BZ	L_mask_2
$004C	$5017	    			MOVF	FARG_mask+0, 0, 0
$004E	$0A01	    			XORLW	1
$0050	$E0DF	    			BZ	L_mask_3
$0052	$5017	    			MOVF	FARG_mask+0, 0, 0
$0054	$0A02	    			XORLW	2
$0056	$E0DF	    			BZ	L_mask_4
$0058	$5017	    			MOVF	FARG_mask+0, 0, 0
$005A	$0A03	    			XORLW	3
$005C	$E0DF	    			BZ	L_mask_5
$005E	$5017	    			MOVF	FARG_mask+0, 0, 0
$0060	$0A04	    			XORLW	4
$0062	$E0DF	    			BZ	L_mask_6
$0064	$5017	    			MOVF	FARG_mask+0, 0, 0
$0066	$0A05	    			XORLW	5
$0068	$E0DF	    			BZ	L_mask_7
$006A	$5017	    			MOVF	FARG_mask+0, 0, 0
$006C	$0A06	    			XORLW	6
$006E	$E0DF	    			BZ	L_mask_8
$0070	$5017	    			MOVF	FARG_mask+0, 0, 0
$0072	$0A07	    			XORLW	7
$0074	$E0DF	    			BZ	L_mask_9
$0076	$5017	    			MOVF	FARG_mask+0, 0, 0
$0078	$0A08	    			XORLW	8
$007A	$E0DF	    			BZ	L_mask_10
$007C	$5017	    			MOVF	FARG_mask+0, 0, 0
$007E	$0A09	    			XORLW	9
$0080	$E0DF	    			BZ	L_mask_11
$0082	$	L_mask_1:
;7segs.c,17 :: 			}
$0082	$0012	    			RETURN
$0084	$	_main:
;7segs.c,19 :: 			void main () {
;7segs.c,22 :: 			trisd = 0;
$0084	$6A95	    			CLRF	TRISD, 0
;7segs.c,23 :: 			trisa = 0;
$0086	$6A92	    			CLRF	TRISA, 0
;7segs.c,24 :: 			porta = 0;
$0088	$6A80	    			CLRF	PORTA, 0
;7segs.c,25 :: 			portd = 0;
$008A	$6A83	    			CLRF	PORTD, 0
;7segs.c,26 :: 			INTCON = 0;
$008C	$6AF2	    			CLRF	INTCON, 0
;7segs.c,28 :: 			while (1) {
$008E	$	L_main_12:
;7segs.c,29 :: 			i = 0;
$008E	$6A15	    			CLRF	_i, 0
$0090	$6A16	    			CLRF	_i+1, 0
;7segs.c,30 :: 			for(i = 0; i < 14 ; i++){
$0092	$6A15	    			CLRF	_i, 0
$0094	$6A16	    			CLRF	_i+1, 0
$0096	$	L_main_14:
$0096	$0E00	    			MOVLW	0
$0098	$5C16	    			SUBWF	_i+1, 0, 0
$009A	$E102	    			BNZ	L_main_21
$009C	$0E0E	    			MOVLW	14
$009E	$5C15	    			SUBWF	_i, 0, 0
$00A0	$	L_main_21:
$00A0	$B0D8	    			BTFSC	STATUS, C, 0
$00A2	$D0BD	    			BRA	L_main_15
;7segs.c,31 :: 			if (i < 9) {
$00A4	$0E00	    			MOVLW	0
$00A6	$5C16	    			SUBWF	_i+1, 0, 0
$00A8	$E102	    			BNZ	L_main_22
$00AA	$0E09	    			MOVLW	9
$00AC	$5C15	    			SUBWF	_i, 0, 0
$00AE	$	L_main_22:
$00AE	$E227	    			BC	L_main_17
;7segs.c,32 :: 			porta.ra4 = 1;
$00B0	$8880	    			BSF	PORTA, 4, 0
;7segs.c,33 :: 			portd = mask(0);
$00B2	$6A17	    			CLRF	FARG_mask+0, 0
$00B4	$EC04	F000			CALL	_mask
$00B8	$C000	FF83			MOVFF	STACK_0, PORTD
;7segs.c,34 :: 			delay_ms(100);
$00BC	$0E02	    			MOVLW	2
$00BE	$6E0C	    			MOVWF	STACK_12, 0
$00C0	$0EFF	    			MOVLW	255
$00C2	$6E0B	    			MOVWF	STACK_11, 0
$00C4	$0EFF	    			MOVLW	255
$00C6	$6E0A	    			MOVWF	STACK_10, 0
$00C8	$2E0C	    			DECFSZ	STACK_12, F, 0
$00CA	$D001	    			BRA	$+2
$00CC	$D007	    			BRA	$+8
$00CE	$2E0B	    			DECFSZ	STACK_11, F, 0
$00D0	$D001	    			BRA	$+2
$00D2	$D003	    			BRA	$+4
$00D4	$2E0A	    			DECFSZ	STACK_10, F, 0
$00D6	$D7FE	    			BRA	$-1
$00D8	$D7FA	    			BRA	$-5
$00DA	$D7F6	    			BRA	$-9
$00DC	$0E06	    			MOVLW	6
$00DE	$6E0B	    			MOVWF	STACK_11, 0
$00E0	$0EFF	    			MOVLW	255
$00E2	$6E0A	    			MOVWF	STACK_10, 0
$00E4	$2E0B	    			DECFSZ	STACK_11, F, 0
$00E6	$D001	    			BRA	$+2
$00E8	$D003	    			BRA	$+4
$00EA	$2E0A	    			DECFSZ	STACK_10, F, 0
$00EC	$D7FE	    			BRA	$-1
$00EE	$D7FA	    			BRA	$-5
$00F0	$0E0A	    			MOVLW	10
$00F2	$6E0A	    			MOVWF	STACK_10, 0
$00F4	$2E0A	    			DECFSZ	STACK_10, F, 0
$00F6	$D7FE	    			BRA	$-1
$00F8	$0000	    			NOP
;7segs.c,35 :: 			porta.ra4 = 0;
$00FA	$9880	    			BCF	PORTA, 4, 0
;7segs.c,36 :: 			} else {
$00FC	$D027	    			BRA	L_main_18
$00FE	$	L_main_17:
;7segs.c,37 :: 			porta.ra4 = 1;
$00FE	$8880	    			BSF	PORTA, 4, 0
;7segs.c,38 :: 			portd = mask(1);
$0100	$0E01	    			MOVLW	1
$0102	$6E17	    			MOVWF	FARG_mask+0, 0
$0104	$EC04	F000			CALL	_mask
$0108	$C000	FF83			MOVFF	STACK_0, PORTD
;7segs.c,39 :: 			delay_ms(100);
$010C	$0E02	    			MOVLW	2
$010E	$6E0C	    			MOVWF	STACK_12, 0
$0110	$0EFF	    			MOVLW	255
$0112	$6E0B	    			MOVWF	STACK_11, 0
$0114	$0EFF	    			MOVLW	255
$0116	$6E0A	    			MOVWF	STACK_10, 0
$0118	$2E0C	    			DECFSZ	STACK_12, F, 0
$011A	$D001	    			BRA	$+2
$011C	$D007	    			BRA	$+8
$011E	$2E0B	    			DECFSZ	STACK_11, F, 0
$0120	$D001	    			BRA	$+2
$0122	$D003	    			BRA	$+4
$0124	$2E0A	    			DECFSZ	STACK_10, F, 0
$0126	$D7FE	    			BRA	$-1
$0128	$D7FA	    			BRA	$-5
$012A	$D7F6	    			BRA	$-9
$012C	$0E06	    			MOVLW	6
$012E	$6E0B	    			MOVWF	STACK_11, 0
$0130	$0EFF	    			MOVLW	255
$0132	$6E0A	    			MOVWF	STACK_10, 0
$0134	$2E0B	    			DECFSZ	STACK_11, F, 0
$0136	$D001	    			BRA	$+2
$0138	$D003	    			BRA	$+4
$013A	$2E0A	    			DECFSZ	STACK_10, F, 0
$013C	$D7FE	    			BRA	$-1
$013E	$D7FA	    			BRA	$-5
$0140	$0E0A	    			MOVLW	10
$0142	$6E0A	    			MOVWF	STACK_10, 0
$0144	$2E0A	    			DECFSZ	STACK_10, F, 0
$0146	$D7FE	    			BRA	$-1
$0148	$0000	    			NOP
;7segs.c,40 :: 			porta.ra4 = 0;
$014A	$9880	    			BCF	PORTA, 4, 0
;7segs.c,41 :: 			}
$014C	$	L_main_18:
;7segs.c,43 :: 			if (i < 9) {
$014C	$0E00	    			MOVLW	0
$014E	$5C16	    			SUBWF	_i+1, 0, 0
$0150	$E102	    			BNZ	L_main_23
$0152	$0E09	    			MOVLW	9
$0154	$5C15	    			SUBWF	_i, 0, 0
$0156	$	L_main_23:
$0156	$E229	    			BC	L_main_19
;7segs.c,44 :: 			porta.ra5 = 1;
$0158	$8A80	    			BSF	PORTA, 5, 0
;7segs.c,45 :: 			portd = mask(i + 1);
$015A	$5015	    			MOVF	_i, 0, 0
$015C	$0F01	    			ADDLW	1
$015E	$6E17	    			MOVWF	FARG_mask+0, 0
$0160	$EC04	F000			CALL	_mask
$0164	$C000	FF83			MOVFF	STACK_0, PORTD
;7segs.c,46 :: 			delay_ms(100);
$0168	$0E02	    			MOVLW	2
$016A	$6E0C	    			MOVWF	STACK_12, 0
$016C	$0EFF	    			MOVLW	255
$016E	$6E0B	    			MOVWF	STACK_11, 0
$0170	$0EFF	    			MOVLW	255
$0172	$6E0A	    			MOVWF	STACK_10, 0
$0174	$2E0C	    			DECFSZ	STACK_12, F, 0
$0176	$D001	    			BRA	$+2
$0178	$D007	    			BRA	$+8
$017A	$2E0B	    			DECFSZ	STACK_11, F, 0
$017C	$D001	    			BRA	$+2
$017E	$D003	    			BRA	$+4
$0180	$2E0A	    			DECFSZ	STACK_10, F, 0
$0182	$D7FE	    			BRA	$-1
$0184	$D7FA	    			BRA	$-5
$0186	$D7F6	    			BRA	$-9
$0188	$0E06	    			MOVLW	6
$018A	$6E0B	    			MOVWF	STACK_11, 0
$018C	$0EFF	    			MOVLW	255
$018E	$6E0A	    			MOVWF	STACK_10, 0
$0190	$2E0B	    			DECFSZ	STACK_11, F, 0
$0192	$D001	    			BRA	$+2
$0194	$D003	    			BRA	$+4
$0196	$2E0A	    			DECFSZ	STACK_10, F, 0
$0198	$D7FE	    			BRA	$-1
$019A	$D7FA	    			BRA	$-5
$019C	$0E0A	    			MOVLW	10
$019E	$6E0A	    			MOVWF	STACK_10, 0
$01A0	$2E0A	    			DECFSZ	STACK_10, F, 0
$01A2	$D7FE	    			BRA	$-1
$01A4	$0000	    			NOP
;7segs.c,47 :: 			porta.ra5 = 0;
$01A6	$9A80	    			BCF	PORTA, 5, 0
;7segs.c,48 :: 			} else {
$01A8	$D028	    			BRA	L_main_20
$01AA	$	L_main_19:
;7segs.c,49 :: 			porta.ra5 = 1;
$01AA	$8A80	    			BSF	PORTA, 5, 0
;7segs.c,50 :: 			portd = mask(i - 8);
$01AC	$0E08	    			MOVLW	8
$01AE	$5C15	    			SUBWF	_i, 0, 0
$01B0	$6E17	    			MOVWF	FARG_mask+0, 0
$01B2	$EC04	F000			CALL	_mask
$01B6	$C000	FF83			MOVFF	STACK_0, PORTD
;7segs.c,51 :: 			delay_ms(100);
$01BA	$0E02	    			MOVLW	2
$01BC	$6E0C	    			MOVWF	STACK_12, 0
$01BE	$0EFF	    			MOVLW	255
$01C0	$6E0B	    			MOVWF	STACK_11, 0
$01C2	$0EFF	    			MOVLW	255
$01C4	$6E0A	    			MOVWF	STACK_10, 0
$01C6	$2E0C	    			DECFSZ	STACK_12, F, 0
$01C8	$D001	    			BRA	$+2
$01CA	$D007	    			BRA	$+8
$01CC	$2E0B	    			DECFSZ	STACK_11, F, 0
$01CE	$D001	    			BRA	$+2
$01D0	$D003	    			BRA	$+4
$01D2	$2E0A	    			DECFSZ	STACK_10, F, 0
$01D4	$D7FE	    			BRA	$-1
$01D6	$D7FA	    			BRA	$-5
$01D8	$D7F6	    			BRA	$-9
$01DA	$0E06	    			MOVLW	6
$01DC	$6E0B	    			MOVWF	STACK_11, 0
$01DE	$0EFF	    			MOVLW	255
$01E0	$6E0A	    			MOVWF	STACK_10, 0
$01E2	$2E0B	    			DECFSZ	STACK_11, F, 0
$01E4	$D001	    			BRA	$+2
$01E6	$D003	    			BRA	$+4
$01E8	$2E0A	    			DECFSZ	STACK_10, F, 0
$01EA	$D7FE	    			BRA	$-1
$01EC	$D7FA	    			BRA	$-5
$01EE	$0E0A	    			MOVLW	10
$01F0	$6E0A	    			MOVWF	STACK_10, 0
$01F2	$2E0A	    			DECFSZ	STACK_10, F, 0
$01F4	$D7FE	    			BRA	$-1
$01F6	$0000	    			NOP
;7segs.c,52 :: 			porta.ra5 = 0;
$01F8	$9A80	    			BCF	PORTA, 5, 0
;7segs.c,53 :: 			}
$01FA	$	L_main_20:
;7segs.c,54 :: 			delay_ms(1);
$01FA	$0E03	    			MOVLW	3
$01FC	$6E0B	    			MOVWF	STACK_11, 0
$01FE	$0EFF	    			MOVLW	255
$0200	$6E0A	    			MOVWF	STACK_10, 0
$0202	$2E0B	    			DECFSZ	STACK_11, F, 0
$0204	$D001	    			BRA	$+2
$0206	$D003	    			BRA	$+4
$0208	$2E0A	    			DECFSZ	STACK_10, F, 0
$020A	$D7FE	    			BRA	$-1
$020C	$D7FA	    			BRA	$-5
$020E	$0E96	    			MOVLW	150
$0210	$6E0A	    			MOVWF	STACK_10, 0
$0212	$2E0A	    			DECFSZ	STACK_10, F, 0
$0214	$D7FE	    			BRA	$-1
$0216	$0000	    			NOP
;7segs.c,55 :: 			}
$0218	$	L_main_16:
;7segs.c,30 :: 			for(i = 0; i < 14 ; i++){
$0218	$4A15	    			INFSNZ	_i, 1, 0
$021A	$2A16	    			INCF	_i+1, 1, 0
;7segs.c,55 :: 			}
$021C	$D73C	    			BRA	L_main_14
$021E	$	L_main_15:
;7segs.c,56 :: 			}
$021E	$D737	    			BRA	L_main_12
;7segs.c,57 :: 			}
$0220	$D7FF	    			BRA	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0008		mask
$0084		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0008		_mask:
$000A		L_mask_2:
$0010		L_mask_3:
$0016		L_mask_4:
$001C		L_mask_5:
$0022		L_mask_6:
$0028		L_mask_7:
$002E		L_mask_8:
$0034		L_mask_9:
$003A		L_mask_10:
$0040		L_mask_11:
$0046		L_mask_0:
$0082		L_mask_1:
$0084		_main:
$008E		L_main_12:
$0096		L_main_14:
$00A0		L_main_21:
$00AE		L_main_22:
$00FE		L_main_17:
$014C		L_main_18:
$0156		L_main_23:
$01AA		L_main_19:
$01FA		L_main_20:
$0218		L_main_16:
$021E		L_main_15:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		_i
$0017		FARG_mask+0
$0F80		PORTA
$0F83		PORTD
$0F92		TRISA
$0F95		TRISD
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF2		INTCON
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


